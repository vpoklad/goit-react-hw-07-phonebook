{"version":3,"sources":["services/phoneBookAPI.js","components/ContactsForm/ContactsForm.js","components/ContactList/ContactItem.js","components/Loader/Loader.js","components/ContactList/ContactList.js","redux/actions.js","components/ContactList/Filter.js","App.js","redux/reducer.js","redux/store.js","index.js","components/ContactsForm/ContactsForm.module.css","components/ContactList/ContactList.module.css","components/Loader/Loader.module.css"],"names":["phoneBookApi","createApi","reducerPath","baseQuery","fetchBaseQuery","baseUrl","tagTypes","endpoints","build","getContacts","query","providesTags","result","map","type","id","deleteContact","mutation","url","method","invalidatesTags","error","addContact","newContact","body","useGetContactsQuery","useDeleteContactMutation","useAddContactMutation","ContactsForm","useForm","register","handleSubmit","reset","errors","formState","contacts","data","className","s","form","onSubmit","some","el","name","toLowerCase","alert","label","title","required","pattern","number","Button","variant","size","endIcon","ContactItem","contact","delItem","item","phone","IconButton","onClick","Loader","backdrop","loader","ContactList","filter","useSelector","state","isFetching","toLocaleLowerCase","includes","setFilter","createAction","Filter","value","dispatch","useDispatch","TextField","onChange","e","target","App","filterReducer","createReducer","payload","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"6SAEaA,EAAeC,YAAU,CACpCC,YAAa,eACbC,UAAWC,YAAe,CACxBC,QAAS,iDAEXC,SAAU,CAAC,YACXC,UAAW,SAAAC,GAAK,MAAK,CACnBC,YAAaD,EAAME,MAAM,CACvBA,MAAO,6BACPC,aAAc,SAAAC,GAAM,OAElBA,EAAM,sBAGGA,EAAOC,KAAI,kBAAa,CAAEC,KAAM,WAAYC,GAAjC,EAAGA,QAHjB,CAIA,CAAED,KAAM,WAAYC,GAAI,UAG1B,CAAC,CAAED,KAAM,WAAYC,GAAI,YAEjCC,cAAeR,EAAMS,SAAS,CAC5BP,MAAO,SAAAK,GAAE,MAAK,CACZG,IAAI,YAAD,OAAcH,GACjBI,OAAQ,WAEVC,gBAAiB,SAACR,EAAQS,EAAON,GAAhB,MAAuB,CAAC,CAAED,KAAM,WAAYC,UAE/DO,WAAYd,EAAMS,SAAS,CACzBP,MAAO,SAAAa,GAAU,MAAK,CACpBL,IAAK,WACLC,OAAQ,OACRK,KAAMD,IAERH,gBAAiB,CAAC,CAAEN,KAAM,WAAYC,GAAI,eAM9CU,EAGEzB,EAHFyB,oBACAC,EAEE1B,EAFF0B,yBACAC,EACE3B,EADF2B,sB,OCjCa,SAASC,IAAgB,IAAD,QACrC,EAKIC,cAJFC,EADF,EACEA,SACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,MACaC,EAJf,EAIEC,UAAaD,OAGDE,EAAaV,IAAnBW,KACR,EAAqBT,IAAdL,EAAP,oBAeA,OACE,uBAAMe,UAAWC,IAAEC,KAAMC,SAAUT,GAdpB,SAAAK,GACMD,EAASM,MAC5B,SAAAC,GAAE,OAAIA,EAAGC,KAAKC,gBAAkBR,EAAKO,KAAKC,iBAG1CC,MAAM,gCAGNvB,EAAWc,GACXJ,QAKF,UACE,wBAAOK,UAAWC,IAAEQ,MAApB,iBAEE,mCACEhC,KAAK,OACLiC,MAAM,mcACFjB,EAAS,OAAQ,CACnBkB,UAAU,EACVC,QACE,6HAGkB,cAAjB,OAANhB,QAAM,IAANA,GAAA,UAAAA,EAAQU,YAAR,eAAc7B,OACb,mBAAGuB,UAAWC,IAAEjB,MAAhB,oCAEsB,aAAjB,OAANY,QAAM,IAANA,GAAA,UAAAA,EAAQU,YAAR,eAAc7B,OACb,mBAAGuB,UAAWC,IAAEjB,MAAhB,6CAIJ,wBAAOgB,UAAWC,IAAEQ,MAApB,kBAEE,+CACEhC,KAAK,OACDgB,EAAS,QAAS,CACpBkB,UAAU,EACVC,QACE,gFALN,IAOEF,MAAM,miBAEkB,cAAnB,OAANd,QAAM,IAANA,GAAA,UAAAA,EAAQiB,cAAR,eAAgBpC,OACf,mBAAGuB,UAAWC,IAAEjB,MAAhB,oCAEwB,aAAnB,OAANY,QAAM,IAANA,GAAA,UAAAA,EAAQiB,cAAR,eAAgBpC,OACf,mBAAGuB,UAAWC,IAAEjB,MAAhB,wCAGJ,cAAC8B,EAAA,EAAD,CACEC,QAAQ,YACRtC,KAAK,SACLuC,KAAK,QACLC,QAAS,cAAC,IAAD,IAJX,4B,+CCpES,SAASC,EAAT,GAAmC,IAAZC,EAAW,EAAXA,QACpC,EAAkB9B,IAAX+B,EAAP,oBACA,OACE,qBAAIpB,UAAWC,IAAEoB,KAAjB,UACE,iCACGF,EAAQb,KADX,KACkB,+BAAOa,EAAQG,WAEjC,cAACC,EAAA,EAAD,CACE,aAAW,SACX7C,GAAIyC,EAAQzC,GACZ8C,QAAS,kBAAMJ,EAAQD,EAAQzC,KAHjC,SAKE,cAAC,IAAD,S,qBChBO,SAAS+C,IACtB,OACE,qBAAKzB,UAAWC,IAAEyB,SAAlB,SACE,sBAAM1B,UAAWC,IAAE0B,WCEV,SAASC,IACtB,IAAMC,EAASC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,UAE1C,EAA6BzC,IAArBW,EAAR,EAAQA,KAAMiC,EAAd,EAAcA,WAEd,OACE,qCACGA,GAAc,cAACP,EAAD,IACf,oBAAIzB,UAAWC,IAAES,MAAjB,sBACCX,IAASiC,GACR,6BACGjC,EACE8B,QAAO,SAAAV,GAAO,OACbA,EAAQb,KAAK2B,oBAAoBC,SAASL,EAAOtB,kBAElD/B,KAAI,SAAA2C,GAAO,OACV,cAACD,EAAD,CAA8BC,QAASA,GAArBA,EAAQzC,Y,oBCpB3ByD,EAAYC,YAAa,cCGvB,SAASC,IACtB,IAAMC,EAAQR,aAAY,SAAAC,GAAK,OAAIA,EAAMF,UACnCU,EAAWC,cACjB,OACE,mCACE,cAACC,EAAA,EAAD,CACE/D,GAAG,kBACH+B,MAAM,wBACNhC,KAAK,SACLsC,QAAQ,WACRuB,MAAOA,EACPI,SAAU,SAAAC,GAAC,OAAIJ,EAASJ,EAAUQ,EAAEC,OAAON,aCZpC,SAASO,IAetB,OACE,sBAAK7C,UAAU,MAAf,UACE,oBAAIA,UAAU,WAAd,uBACA,cAACT,EAAD,IACA,cAAC8C,EAAD,IACA,cAACT,EAAD,O,aCnBOkB,EAAgBC,YAAc,GAAD,eACvCZ,GAAY,SAACJ,EAAD,YAAUiB,YCDZC,EAAQC,YAAe,CAClCC,SAAO,mBACJxF,EAAaE,YAAcF,EAAawF,SADpC,uBAEGL,GAFH,GAIPM,WAAY,SAAAC,GAAoB,OAC9BA,IAAuBC,OAAO3F,EAAayF,eCH/CG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAACJ,EAAD,QAGJa,SAASC,eAAe,U,mBCb1BC,EAAOC,QAAU,CAAC,KAAO,2BAA2B,MAAQ,4BAA4B,MAAQ,8B,mBCAhGD,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,KAAO,4B,mBCA5DD,EAAOC,QAAU,CAAC,SAAW,yBAAyB,OAAS,uBAAuB,SAAW,2B","file":"static/js/main.b81820b3.chunk.js","sourcesContent":["import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\r\n\r\nexport const phoneBookApi = createApi({\r\n  reducerPath: 'phoneBookApi',\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: 'https://6193696ed3ae6d0017da854a.mockapi.io/',\r\n  }),\r\n  tagTypes: ['Contacts'],\r\n  endpoints: build => ({\r\n    getContacts: build.query({\r\n      query: () => `contacts`,\r\n      providesTags: result =>\r\n        // is result available?\r\n        result\r\n          ? // successful query\r\n            [\r\n              ...result.map(({ id }) => ({ type: 'Contacts', id })),\r\n              { type: 'Contacts', id: 'LIST' },\r\n            ]\r\n          : // an error occurred, but we still want to refetch this query when `{ type: 'Posts', id: 'LIST' }` is invalidated\r\n            [{ type: 'Contacts', id: 'LIST' }],\r\n    }),\r\n    deleteContact: build.mutation({\r\n      query: id => ({\r\n        url: `contacts/${id}`,\r\n        method: 'DELETE',\r\n      }),\r\n      invalidatesTags: (result, error, id) => [{ type: 'Contacts', id }],\r\n    }),\r\n    addContact: build.mutation({\r\n      query: newContact => ({\r\n        url: 'contacts',\r\n        method: 'POST',\r\n        body: newContact,\r\n      }),\r\n      invalidatesTags: [{ type: 'Contacts', id: 'LIST' }],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetContactsQuery,\r\n  useDeleteContactMutation,\r\n  useAddContactMutation,\r\n} = phoneBookApi;\r\n","import Button from '@mui/material/Button';\nimport SendIcon from '@mui/icons-material/Send';\nimport s from './ContactsForm.module.css';\n\nimport { useForm } from 'react-hook-form';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from '../../services/phoneBookAPI';\n\nexport default function ContactsForm() {\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm();\n\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact] = useAddContactMutation();\n\n  const onSubmit = data => {\n    const existContact = contacts.some(\n      el => el.name.toLowerCase() === data.name.toLowerCase(),\n    );\n    if (existContact) {\n      alert(`this contact already exists`);\n      return;\n    } else {\n      addContact(data);\n      reset();\n    }\n  };\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit(onSubmit)}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          {...register('name', {\n            required: true,\n            pattern:\n              /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n          })}\n        />\n        {errors?.name?.type === 'required' && (\n          <p className={s.error}>This field is required</p>\n        )}\n        {errors?.name?.type === 'pattern' && (\n          <p className={s.error}>Alphabetical characters only</p>\n        )}\n      </label>\n\n      <label className={s.label}>\n        Phone\n        <input\n          type=\"tel\"\n          {...register('phone', {\n            required: true,\n            pattern:\n              /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n          })}\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        />\n        {errors?.number?.type === 'required' && (\n          <p className={s.error}>This field is required</p>\n        )}\n        {errors?.number?.type === 'pattern' && (\n          <p className={s.error}>Numeric characters only</p>\n        )}\n      </label>\n      <Button\n        variant=\"contained\"\n        type=\"submit\"\n        size=\"small\"\n        endIcon={<SendIcon />}\n      >\n        Add contact\n      </Button>\n    </form>\n  );\n}\n","import IconButton from '@mui/material/IconButton';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport s from './ContactList.module.css';\r\nimport { useDeleteContactMutation } from '../../services/phoneBookAPI';\r\nimport PropTypes from 'prop-types';\r\nexport default function ContactItem({ contact }) {\r\n  const [delItem] = useDeleteContactMutation();\r\n  return (\r\n    <li className={s.item}>\r\n      <span>\r\n        {contact.name}: <span>{contact.phone}</span>\r\n      </span>\r\n      <IconButton\r\n        aria-label=\"delete\"\r\n        id={contact.id}\r\n        onClick={() => delItem(contact.id)}\r\n      >\r\n        <DeleteIcon />\r\n      </IconButton>\r\n    </li>\r\n  );\r\n}\r\nContactItem.propTypes = {\r\n  contact: PropTypes.shape({\r\n    name: PropTypes.string,\r\n    phone: PropTypes.string,\r\n    id: PropTypes.string,\r\n  }),\r\n};\r\n","import s from './Loader.module.css';\r\nexport default function Loader() {\r\n  return (\r\n    <div className={s.backdrop}>\r\n      <span className={s.loader}></span>\r\n    </div>\r\n  );\r\n}\r\n","import ContactItem from './ContactItem';\r\nimport s from './ContactList.module.css';\r\nimport { useGetContactsQuery } from '../../services/phoneBookAPI';\r\nimport { useSelector } from 'react-redux';\r\nimport Loader from '../Loader/Loader';\r\n\r\nexport default function ContactList() {\r\n  const filter = useSelector(state => state.filter);\r\n\r\n  const { data, isFetching } = useGetContactsQuery();\r\n\r\n  return (\r\n    <>\r\n      {isFetching && <Loader />}\r\n      <h2 className={s.title}>Contacts</h2>\r\n      {data && !isFetching && (\r\n        <ul>\r\n          {data\r\n            .filter(contact =>\r\n              contact.name.toLocaleLowerCase().includes(filter.toLowerCase()),\r\n            )\r\n            .map(contact => (\r\n              <ContactItem key={contact.id} contact={contact} />\r\n            ))}\r\n        </ul>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { createAction } from '@reduxjs/toolkit';\n\nexport const setFilter = createAction('filter/set');\n","import TextField from '@mui/material/TextField';\r\n// import PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { setFilter } from '../../redux/actions';\r\n\r\nexport default function Filter() {\r\n  const value = useSelector(state => state.filter);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <>\r\n      <TextField\r\n        id=\"standard-search\"\r\n        label=\"Find contacts by name\"\r\n        type=\"search\"\r\n        variant=\"standard\"\r\n        value={value}\r\n        onChange={e => dispatch(setFilter(e.target.value))}\r\n      />\r\n    </>\r\n  );\r\n}\r\n// Filter.propTypes = {\r\n//   value: PropTypes.string,\r\n//   handlChange: PropTypes.func,\r\n// };\r\n\r\n// const mapStateToProps = state => ({\r\n//   value: state.filter,\r\n// });\r\n// const mapDispatchToProps = dispatch => ({\r\n//   handleChange: e => dispatch(setFilter(e.target.value)),\r\n// });\r\n// export default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import ContactsForm from './components/ContactsForm/ContactsForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport Filter from './components/ContactList/Filter';\r\n\r\nexport default function App() {\r\n  // componentDidMount() {\r\n  //   const data = localStorage.getItem('contacts');\r\n  //   const parsedData = JSON.parse(data);\r\n  //   if (parsedData) {\r\n  //     this.setState({ contacts: parsedData });\r\n  //   }\r\n  // }\r\n\r\n  // componentDidUpdate(prevPropos, prevState) {\r\n  //   if (prevState.contacts !== this.state.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n  // }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <h1 className=\"appTitle\">Phonebook</h1>\r\n      <ContactsForm />\r\n      <Filter />\r\n      <ContactList />\r\n    </div>\r\n  );\r\n}\r\n","// import { types } from '../redux/types';\n\nimport { createReducer } from '@reduxjs/toolkit';\nimport { setFilter } from './actions';\n\nexport const filterReducer = createReducer('', {\n  [setFilter]: (state, { payload }) => (state = payload),\n});\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport { filterReducer } from './reducer';\nimport { phoneBookApi } from '../services/phoneBookAPI';\n\nexport const store = configureStore({\n  reducer: {\n    [phoneBookApi.reducerPath]: phoneBookApi.reducer,\n    filter: filterReducer,\n  },\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware().concat(phoneBookApi.middleware),\n});\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport './index.css';\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport App from './App';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactsForm_form__1v-8f\",\"label\":\"ContactsForm_label__2QOgP\",\"error\":\"ContactsForm_error__2Vxs0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactList_title__cNlMF\",\"item\":\"ContactList_item__3B7v0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Loader_backdrop__2EAbP\",\"loader\":\"Loader_loader__3hV_h\",\"rotation\":\"Loader_rotation__3Qzat\"};"],"sourceRoot":""}